{"version":3,"sources":["component/Input.js","component/Button.js","component/shared/ChavronIcon.js","component/shared/WeatherDetailsHeader.js","component/shared/WeeklyDetails.js","component/shared/Accordion.js","component/shared/WeeklyDetailsList.js","component/shared/LoadingSpinner.js","component/shared/WeeklyData.js","component/shared/CurrentData.js","component/shared/Chart.js","component/shared/GoogleMap.js","component/shared/EmptyData.js","component/CurrentWeather.js","App.js","reportWebVitals.js","index.js"],"names":["Input","type","value","placeholder","onChange","className","Button","onClick","label","Chavron","props","width","height","xmlns","viewBox","fill","d","WeatherDetailsHeader","activeState","activeDate","setActiveState","setRotateState","setDailyWeatherDetails","setActiveDate","setRotate","weeklyWeather","toggleAccordion","map","i","day","moment","unix","dt","utc","console","log","e","weatherIcon","weather","icon","daliyMinTemp","temp","min","daliyMaxTemp","max","dailyDescription","description","clouds","wind_speed","pressure","humidity","uvi","dew_point","feelsLikeDay","feels_like","feelsLikeNight","night","feelsLikeEve","eve","feelsLikeMorn","morn","sunrise","format","sunset","ChavronIcon","WeeklyDetails","dailyWeatherDetails","src","alt","Math","floor","Accordion","useState","useRef","WeeklyDetailsList","toggleClass","data","LoadingSpinner","class","WeeklyData","preventDefault","title","content","CurrentData","display","name","feelsLike","wind","visibility","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","options","responsive","plugins","legend","position","Chart","labels","newXAxisData","datasets","newYAxisData","borderColor","backgroundColor","GoogleApiWrapper","apiKey","isBoolean","setIsBoolean","useEffect","aLet","aLon","google","zoom","initialCenter","lat","lng","onReady","fetchPlaces","onMarkerClick","onClose","onInfoWindowClose","EmptyData","CurrentWeather","search","setSearch","setWeeklyWeather","ref","xAxis","yAxis","chartAxis","setChartAxis","cordinate","setCordinate","minTemperature","maxTemperature","view","setData","geolocation","setGeolocation","navigator","getCurrentPosition","coords","latitude","longitude","watchPosition","fetchData","fetchWeatherData","a","axios","method","url","response","main","speed","coord","lon","error","message","apikey","fetch","dailyForcast","json","daily","hourly","current","res","onSubmit","target","isMarkerShown","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3459b247.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Input = ({ type, value, placeholder, onChange, className }) => {\n  return (\n    <input\n      type={type}\n      value={value}\n      placeholder={placeholder}\n      onChange={onChange}\n      className={className}\n    />\n  );\n};\n","import React from \"react\";\n\nexport const Button = ({ onClick, className, label, type }) => {\n  return (\n    <button onClick={onClick} className={className} type={type}>\n      {label}\n    </button>\n  );\n};\n","import React from \"react\";\n\nfunction Chavron(props) {\n  return (\n    <svg\n      className={props.className}\n      width='15px'\n      height='15px'\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 320 512\"\n    >\n      <path\n        fill=\"#48484A\"\n        d=\"M98.9,184.7l1.8,2.1l136,156.5c4.6,5.3,11.5,8.6,19.2,8.6c7.7,0,14.6-3.4,19.2-8.6L411,187.1l2.3-2.6  c1.7-2.5,2.7-5.5,2.7-8.7c0-8.7-7.4-15.8-16.6-15.8v0H112.6v0c-9.2,0-16.6,7.1-16.6,15.8C96,179.1,97.1,182.2,98.9,184.7z\"\n      ></path>\n    </svg>\n  );\n}\n\nexport default Chavron;\n","import React from \"react\";\nimport moment from \"moment\";\nimport ChavronIcon from \"./ChavronIcon\";\n\nfunction WeatherDetailsHeader(props) {\n  const {\n    activeState,\n    activeDate,\n    setActiveState,\n    setRotateState,\n    setDailyWeatherDetails,\n    setActiveDate,\n    setRotate,\n    weeklyWeather,\n  } = props;\n\n  const toggleAccordion = () => {\n    setActiveState(activeState === \"active\" ? \"\" : \"active\");\n    setRotateState(\n      activeState === \"active\" ? \"accordion__icon\" : \"accordion__icon rotate\"\n    );\n  };\n\n  const detailsHandler = (e) => {\n    console.log(\"event==\", e);\n    setDailyWeatherDetails({\n      weatherIcon: e.weather[0].icon,\n      daliyMinTemp: e.temp.min,\n      daliyMaxTemp: e.temp.max,\n      dailyDescription: e.weather[0].description,\n      clouds: e.clouds,\n      wind_speed: e.wind_speed,\n      pressure: e.pressure,\n      humidity: e.humidity,\n      uvi: e.uvi,\n      dew_point: e.dew_point,\n      feelsLikeDay: e.feels_like.day,\n      feelsLikeNight: e.feels_like.night,\n      feelsLikeEve: e.feels_like.eve,\n      feelsLikeMorn: e.feels_like.morn,\n      sunrise: moment(e.sunrise).format(\"h:mm a\"),\n      sunset: moment(e.sunset).format(\"h:mm a\"),\n    });\n    setActiveDate(e.dt);\n  };\n\n  return (\n    <div className={`accordion`}>\n      <ul className=\"days_inner_list\">\n        {weeklyWeather\n          ? weeklyWeather.map((value, i) => {\n              const day = moment.unix(value.dt).utc();\n              if (i <= 8) {\n                console.log(\"value.dt=====\", day);\n                return (\n                  <>\n                    <li\n                      className={`day_content ${\n                        value.dt === activeDate ? \"active\" : \"\"\n                      }`}\n                      onClick={() =>\n                        value.dt === activeDate\n                          ? toggleAccordion()\n                          : detailsHandler(value)\n                      }\n                    >\n                      <span className=\"gutter__right\">\n                        {moment(day).format(\"ddd\")},\n                      </span>\n                      <span>{moment(day).format(\"MMMM Do\")}</span>\n                    </li>\n                  </>\n                );\n              }\n            })\n          : null}\n      </ul>\n      <div onClick={toggleAccordion}>\n        <ChavronIcon\n          className={`${setRotate}`}\n          width={15}\n          height={15}\n          fill={\"#48484A\"}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default WeatherDetailsHeader;\n","import React from \"react\";\n\nfunction WeeklyDetails(props) {\n  const { dailyWeatherDetails } = props;\n\n  return (\n    <div>\n      <div className=\"scrolling_container_content\">\n        {dailyWeatherDetails.weatherIcon ? (\n          <>\n            <div className=\"top__section\">\n              <img\n                className=\"owm_weather_icon\"\n                src={`http://openweathermap.org/img/wn/${dailyWeatherDetails.weatherIcon}@2x.png`}\n                alt=\"weather-icon\"\n                width=\"200\"\n                height=\"200\"\n              />\n              <div className=\"inner_content\">\n                <p>{dailyWeatherDetails.dailyDescription}</p>\n                <p>\n                  The high will be{\" \"}\n                  {Math.floor(dailyWeatherDetails.daliyMaxTemp)}\n                  ℃, the low will be{\" \"}\n                  {Math.floor(dailyWeatherDetails.daliyMinTemp)}℃.\n                </p>\n              </div>\n            </div>\n\n            <ul className=\"weather__items\">\n              <li>{dailyWeatherDetails.clouds}%</li>\n              <li>{dailyWeatherDetails.wind_speed} m/s WNW</li>\n              <li>{dailyWeatherDetails.pressure}hPa</li>\n              <li>Humidity: {dailyWeatherDetails.humidity}%</li>\n              <li>UV: {dailyWeatherDetails.uvi}</li>\n              <li>Dew point: {dailyWeatherDetails.dew_point}</li>\n            </ul>\n            <table className=\"table__content\">\n              <tr>\n                <th></th>\n                <th>Morning</th>\n                <th>Afternoon</th>\n                <th>Evening</th>\n                <th>Night</th>\n              </tr>\n              <tr>\n                <td>TEMPERATURE</td>\n                <td>{Math.floor(dailyWeatherDetails.feelsLikeMorn)}℃</td>\n                <td>{Math.floor(dailyWeatherDetails.feelsLikeDay)}℃</td>\n                <td>{Math.floor(dailyWeatherDetails.feelsLikeEve)}℃</td>\n                <td>{Math.floor(dailyWeatherDetails.feelsLikeNight)}℃</td>\n              </tr>\n              <tr>\n                <td>FEELS LIKE</td>\n                <td>{Math.floor(dailyWeatherDetails.feelsLikeMorn)}℃</td>\n                <td>{Math.floor(dailyWeatherDetails.feelsLikeDay)}℃</td>\n                <td>{Math.floor(dailyWeatherDetails.feelsLikeEve)}℃</td>\n                <td>{Math.floor(dailyWeatherDetails.feelsLikeNight)}℃</td>\n              </tr>\n            </table>\n            <div className=\"item_container\">\n              <div className=\"item\">\n                <span className=\"label\">Sunrise</span>\n                <span className=\"value\">{dailyWeatherDetails.sunrise}</span>\n              </div>\n              <div className=\"item\">\n                <span className=\"label\">Sunset</span>\n                <span className=\"value\">{dailyWeatherDetails.sunset}</span>\n              </div>\n            </div>\n          </>\n        ) : (\n          <div className=\"message\">Select above date</div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default WeeklyDetails;\n","import React, { useState, useRef } from \"react\";\nimport \"./Accordion.css\";\nimport \"./Accordion.css\";\nimport WeatherDetailsHeader from \"./WeatherDetailsHeader\";\nimport WeeklyDetails from \"./WeeklyDetails\";\n\nfunction Accordion(props) {\n  // console.log(\"days data=====\", props.weeklyWeather);\n  const [setRotate, setRotateState] = useState(\"accordion__icon\");\n  const { activeState, setActiveState } = props;\n\n  const [dailyWeatherDetails, setDailyWeatherDetails] = useState({\n    weatherIcon: \"\",\n    daliyMinTemp: [],\n    daliyMaxTemp: [],\n    dailyDescription: \"\",\n    clouds: \"\",\n    wind_speed: \"\",\n    pressure: \"\",\n    humidity: \"\",\n    uvi: \"\",\n    dew_point: \"\",\n    feelsLikeDay: \"\",\n    feelsLikeNight: \"\",\n    feelsLikeEve: \"\",\n    feelsLikeMorn: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n  });\n\n  const [activeDate, setActiveDate] = useState(\"\");\n\n  const content = useRef(null);\n\n  console.log(\"activeDate=====\", activeDate);\n\n  return (\n    <div className=\"accordion__section\">\n      <div className=\"grid-item\">\n        <WeatherDetailsHeader\n          activeState={activeState}\n          activeDate={activeDate}\n          setActiveState={setActiveState}\n          setRotateState={setRotateState}\n          setDailyWeatherDetails={setDailyWeatherDetails}\n          setActiveDate={setActiveDate}\n          setRotate={setRotate}\n          weeklyWeather={props.weeklyWeather}\n        />\n        <WeeklyDetails dailyWeatherDetails={dailyWeatherDetails} />\n      </div>\n    </div>\n  );\n}\n\nexport default Accordion;\n","import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport ChavronIcon from \"./ChavronIcon\";\n\nfunction WeeklyDetailsList({ activeState, weeklyWeather, toggleClass, data }) {\n  console.log(\"activeState======\", activeState);\n  return (\n    <div>\n      <ul className={`day__list ${activeState}`}>\n        {weeklyWeather\n          ? weeklyWeather.map((value, i) => {\n              const day = moment.unix(value.dt).utc();\n              if (i <= 8) {\n                return (\n                  <li key={i} className={`grid-item`} onClick={toggleClass}>\n                    <div\n                      className=\"day_content\"\n                    >\n                      <span className=\"gutter__right\">\n                        {moment(day).format(\"ddd\")},\n                      </span>\n                      <span>{moment(day).format(\"MMMM Do, h:mm a\")}</span>\n                    </div>\n                    <div className=\"day__list__values\">\n                      <img\n                        className=\"owm_weather_icon\"\n                        src={`http://openweathermap.org/img/wn/${value.weather[0].icon}@2x.png`}\n                        alt=\"weather-icon\"\n                        width=\"200\"\n                        height=\"200\"\n                      />\n                      {value.temp.max}/{value.temp.min}℃\n                      <div className=\"weather__content\">\n                        <button\n                          className={`weather_description ${activeState}`}\n                        >\n                          {data.description}{\" \"}\n                          <ChavronIcon className=\"\" width={10} fill={\"#777\"} />\n                        </button>\n                      </div>\n                    </div>\n                  </li>\n                );\n              }\n            })\n          : null}\n      </ul>\n    </div>\n  );\n}\n\nexport default WeeklyDetailsList;\n","import React from \"react\";\nimport \"./LoadingSpinner.css\";\n\nfunction LoadingSpinner() {\n  return <div class=\"loading\" data-loading-text=\"Loading...\"></div>;\n}\n\nexport default LoadingSpinner;\n","import React, { useState } from \"react\";\nimport Accordion from \"./Accordion\";\nimport \"./Accordion.css\";\nimport WeeklyDetailsList from \"./WeeklyDetailsList\";\nimport LoadingSpinner from \"./LoadingSpinner\";\n\nfunction WeeklyData({ weeklyWeather, data }) {\n  const [activeState, setActiveState] = useState(\"\");\n\n  const toggleClass = (e) => {\n    e.preventDefault();\n    setActiveState(activeState === \"\" ? \"active\" : \"\");\n  };\n\n  return (\n    <div className=\"weekly_weather_data\">\n      <h3>8-day forecast</h3>\n      {weeklyWeather ? (\n        <div>\n          <WeeklyDetailsList\n            activeState={activeState}\n            weeklyWeather={weeklyWeather}\n            toggleClass={toggleClass}\n            data={data}\n          />\n          {activeState && (\n            <Accordion\n              title={data.description}\n              content=\"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\"\n              setActiveState={setActiveState}\n              activeState={activeState}\n              weeklyWeather={weeklyWeather}\n              data={data}\n            />\n          )}\n        </div>\n      ) : (\n        <div>\n          <LoadingSpinner />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default WeeklyData;\n","import React from \"react\";\nimport moment from \"moment\";\n\nfunction CurrentData({ data }) {\n  return (\n    <div>\n      {data.display ? (\n        <>\n          <h4 className=\"text__orange\">\n            {moment().format(\"dddd\")} {moment().format(\"MMMM Do h:mma\")}\n          </h4>\n          <h2 className=\"location__title\">{data.name}</h2>\n          <div className=\"current__temp\">\n            <img\n              className=\"owm_weather_icon\"\n              src={`http://openweathermap.org/img/wn/${data.icon}@2x.png`}\n              alt=\"weather-icon\"\n              width=\"200\"\n              height=\"200\"\n            />\n            <h2 className=\"temp\">{Math.floor(data.temp)}℃</h2>\n          </div>\n          <p className=\"para__des\">\n            <span className=\"gutter__right\">\n              Feel Like {Math.floor(data.feelsLike)}℃\n            </span>{\" \"}\n            {data.description} Moderate breeze\n          </p>\n          <ul className=\"weather__items\">\n            <li>{data.wind}m/s WNW</li>\n            <li>{data.pressure}hPa</li>\n            <li>Humidity: {data.humidity}%</li>\n            <li>Visibility: {data.visibility / 1000}.km</li>\n          </ul>\n        </>\n      ) : null}\n    </div>\n  );\n}\n\nexport default CurrentData;\n","import React from \"react\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport const options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: \"top\",\n    },\n    title: {\n      display: true,\n    },\n  },\n};\n\nfunction Chart({newXAxisData, newYAxisData}) {\n  const labels = newXAxisData;\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: \"Temperature\",\n        data: newYAxisData,\n        borderColor: \"#eb6e4b\",\n        backgroundColor: \"#eb6e4b\",\n      },\n    ],\n  };\n  return (\n    <div className=\"hourly_chart\">\n      <h3>Hourly forecast</h3>\n      <Line options={options} data={data} className=\"line__chart\" />\n    </div>\n  );\n}\n\nexport default Chart;\n","import React, { useEffect, useState } from \"react\";\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from \"google-maps-react\";\n\nfunction GoogleMap(props) {\n  const [isBoolean, setIsBoolean] = useState(false);\n  useEffect(() => {\n    setIsBoolean(!isBoolean);\n  }, [props.aLet, props.aLon, props]);\n  console.log(\"props===\", props.aLet);\n  console.log(\"props===\", props.aLon);\n  return (\n    <div>\n      {\" \"}\n      {isBoolean ? (\n        <Map\n          google={props.google}\n          zoom={8}\n          initialCenter={{\n            lat: props.aLet,\n            lng: props.aLon,\n          }}\n          onReady={props.fetchPlaces}\n        >\n          <Marker onClick={props.onMarkerClick} name={props.data.name} />\n          <InfoWindow onClose={props.onInfoWindowClose}>\n            <div>\n              <h1>{props.data.name}</h1>\n            </div>\n          </InfoWindow>\n        </Map>\n      ) : null}\n    </div>\n  );\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCSn-oTVSgL5rC3C3w5XvGTpx4c8YtKMb4\",\n})(GoogleMap);\n","import React from \"react\";\n\nfunction EmptyData({ title, content }) {\n  return (\n    <div className=\"no_data\">\n      <span className=\"folder__icon\">\n        <i class=\"fa fa-folder-open\" aria-hidden=\"true\"></i>\n      </span>\n      <h2>{title}</h2>\n      <p>{content}</p>\n    </div>\n  );\n}\n\nexport default EmptyData;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./WeatherApp.css\";\nimport { Input } from \"./Input\";\nimport { Button } from \"./Button\";\nimport axios from \"axios\";\nimport WeeklyData from \"./shared/WeeklyData\";\nimport CurrentData from \"./shared/CurrentData\";\nimport Chart from \"./shared/Chart\";\nimport moment from \"moment\";\nimport GoogleMap from \"./shared/GoogleMap\";\nimport EmptyData from \"./shared/EmptyData\";\n\nfunction CurrentWeather(props) {\n  const [search, setSearch] = useState(\"\");\n  const [weeklyWeather, setWeeklyWeather] = useState([]);\n  const ref = useRef();\n\n  const [chartAxis, setChartAxis] = useState({\n    xAxis: [],\n    yAxis: [],\n  });\n\n  const [cordinate, setCordinate] = useState({\n    aLet: 0,\n    aLon: 0,\n  });\n\n  const [data, setData] = useState({\n    temp: 0,\n    minTemperature: [],\n    maxTemperature: [],\n    humidity: \"\",\n    description: \"\",\n    icon: \"\",\n    display: false,\n    pressure: \"\",\n    feelsLike: 0,\n    visibility: \"\",\n    wind: 0,\n    name: \"\",\n    view: false,\n  });\n\n  const [geolocation, setGeolocation] = useState({\n    lat: \"\",\n    log: \"\",\n  });\n\n  useEffect(() => {\n    if (search === \"\") {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setGeolocation({\n          ...geolocation,\n          lat: position.coords.latitude,\n          log: position.coords.longitude,\n        });\n      });\n    }\n    if (navigator.geolocation) {\n      navigator.geolocation.watchPosition(function (position) {\n        setGeolocation({\n          ...geolocation,\n          lat: position.coords.latitude,\n          log: position.coords.longitude,\n        });\n      });\n    }\n  }, [geolocation.lat, geolocation.log]);\n\n  useEffect(() => {\n    if (geolocation.lat && geolocation.log) {\n      fetchData();\n    }\n  }, [geolocation.lat, geolocation.log]);\n\n  const fetchWeatherData = async (search) => {\n    try {\n      const response = await axios({\n        method: \"GET\",\n        url: `https://api.openweathermap.org/data/2.5/weather?q=${search}&appid=35bd10c223b33cc321caa26ce46f7f0b`,\n      });\n      console.log(\"response\", response.data);\n      setData({\n        temp: response.data.main.temp - 273.15,\n        humidity: response.data.main.humidity,\n        description: response.data.weather[0].description,\n        icon: response.data.weather[0].icon,\n        display: true,\n        pressure: response.data.main.pressure,\n        feelsLike: response.data.main.feels_like - 273.15,\n        visibility: response.data.visibility,\n        wind: response.data.wind.speed,\n        name: response.data.name,\n        view: true,\n      });\n      setCordinate({\n        ...cordinate,\n        aLet: response.data.coord.lat,\n        aLon: response.data.coord.lon,\n      });\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n  const fetchData = async (search) => {\n    const apikey = `https://api.openweathermap.org/data/2.5/onecall?lat=${geolocation.lat}&lon=${geolocation.log}&units=metric&exclude`;\n    const response = await fetch(\n      `${apikey}=current&appid=3c072250b7b95a5b2c1f101aabc82b3a`\n    );\n    const dailyForcast = await fetch(\n      `${apikey}=hourly,daily&appid=3c072250b7b95a5b2c1f101aabc82b3a`\n    );\n    const data = await response.json();\n    const dailyData = await dailyForcast.json();\n    setWeeklyWeather(data.daily);\n    setChartAxis({\n      ...chartAxis,\n      xAxis: data.hourly,\n      yAxis: data.hourly,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    fetchWeatherData(search);\n    fetchData();\n  };\n\n  useEffect(() => {\n    ref.current = setSearch;\n  }, []);\n\n  const newXAxisData =\n    chartAxis.xAxis &&\n    chartAxis.xAxis.map((res) => {\n      const day = moment.unix(res.dt).utc();\n      return moment(day).format(\"h:mm a\");\n    });\n  const newYAxisData =\n    chartAxis.yAxis &&\n    chartAxis.yAxis.map((res) => {\n      return res.temp;\n    });\n  return (\n    <div>\n      <div className=\"app__header\">\n        <form className=\"search__filter\" onSubmit={handleSubmit}>\n          <div className=\"input__group\">\n            <Input\n              className=\"search__filed\"\n              type=\"search\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              placeholder=\"Search City\"\n            ></Input>\n            <Button type=\"submit\" className=\"search__btn\" label={\"Search\"} />\n          </div>\n        </form>\n      </div>\n      {data.view ? (\n        <>\n          <div className=\"main__container\">\n            <div className=\"grid__container\">\n              <div className=\"current__container\">\n                <CurrentData\n                  display={data.display}\n                  data={data}\n                  aLet={cordinate.aLet}\n                  aLon={cordinate.aLon}\n                />\n              </div>\n              <div className=\"map__section\">\n                <GoogleMap\n                  isMarkerShown\n                  geolocation={geolocation}\n                  data={data}\n                  aLet={cordinate.aLet}\n                  aLon={cordinate.aLon}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"inner__container\">\n            <Chart newXAxisData={newXAxisData} newYAxisData={newYAxisData} />\n            <WeeklyData weeklyWeather={weeklyWeather} data={data} />\n          </div>\n        </>\n      ) : (\n        <EmptyData\n          title=\"No result found\"\n          content=\"Try adjusting your search to find what your looking for.\"\n        />\n      )}\n    </div>\n  );\n}\nexport default CurrentWeather;\n","import './App.css';\nimport CurrentWeather from './component/CurrentWeather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CurrentWeather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}