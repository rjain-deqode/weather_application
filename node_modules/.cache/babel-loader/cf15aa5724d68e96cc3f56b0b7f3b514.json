{"ast":null,"code":"var _jsxFileName = \"/home/deq/Desktop/my_work/React-training-raksha/src/component/CurrentWeather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./WeatherApp.css\";\nimport { Input } from \"./Input\";\nimport { Button } from \"./Button\";\nimport axios from \"axios\";\nimport WeeklyData from \"./shared/WeeklyData\";\nimport CurrentData from \"./shared/CurrentData\";\nimport Chart from \"./shared/Chart\";\nimport moment from \"moment\";\nimport GoogleMap from \"./shared/GoogleMap\";\nimport Accordion from \"./shared/Accordion\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CurrentWeather() {\n  _s();\n\n  const [search, setSearch] = useState(\"\");\n  const [weeklyWeather, setWeeklyWeather] = useState([]);\n  const ref = useRef();\n  const [xAxis, setXais] = useState([]);\n  const [yAxis, setYaxis] = useState([]); // const [chartDescription, setchartDescription] = useState([]);\n  // const [newChartDes, setNewChartDes] = useState([]);\n  // Accordion\n\n  const [setActive, setActiveState] = useState(\"\");\n  const [setHeight, setHeightState] = useState(\"0px\");\n  const [setRotate, setRotateState] = useState(\"accordion__icon\");\n  const [data, setData] = useState({\n    temp: 0,\n    minTemperature: [],\n    maxTemperature: [],\n    humidity: \"\",\n    description: \"\",\n    icon: \"\",\n    display: false,\n    pressure: \"\",\n    feelsLike: 0,\n    visibility: \"\",\n    wind: 0,\n    name: \"\"\n  });\n  const [geolocation, setGeolocation] = useState({\n    lat: \"\",\n    log: \"\"\n  });\n  const content = useRef(null);\n\n  const toggleAccordion = () => {\n    setActiveState(setActive === \"\" ? \"active\" : \"\");\n    setHeightState(setActive === \"active\" ? \"0px\" : `${content.current.scrollHeight}px`);\n    setRotateState(setActive === \"active\" ? \"accordion__icon\" : \"accordion__icon rotate\");\n    console.log(content.current.scrollHeight);\n  };\n\n  useEffect(() => {\n    if (search === \"\") {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setGeolocation({ ...geolocation,\n          lat: position.coords.latitude,\n          log: position.coords.longitude\n        });\n      });\n    }\n\n    if (navigator.geolocation) {\n      navigator.geolocation.watchPosition(function (position) {\n        setGeolocation({ ...geolocation,\n          lat: position.coords.latitude,\n          log: position.coords.longitude\n        });\n      });\n    }\n  }, [geolocation.lat, geolocation.log]);\n  useEffect(() => {\n    if (geolocation.lat && geolocation.log) {\n      fetchData();\n    }\n  }, [geolocation.lat, geolocation.log]);\n\n  const fetchWeatherData = async search => {\n    try {\n      const response = await axios({\n        method: \"GET\",\n        url: `http://api.openweathermap.org/data/2.5/weather?q=${search}&appid=35bd10c223b33cc321caa26ce46f7f0b`\n      });\n      setData({\n        temp: response.data.main.temp - 273.15,\n        humidity: response.data.main.humidity,\n        description: response.data.weather[0].description,\n        icon: response.data.weather[0].icon,\n        display: true,\n        pressure: response.data.main.pressure,\n        feelsLike: response.data.main.feels_like - 273.15,\n        visibility: response.data.visibility,\n        wind: response.data.wind.speed,\n        name: response.data.name\n      });\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const fetchData = async search => {\n    const apikey = `https://api.openweathermap.org/data/2.5/onecall?lat=${geolocation.lat}&lon=${geolocation.log}&units=metric&exclude`;\n    const response = await fetch(`${apikey}=current&appid=3c072250b7b95a5b2c1f101aabc82b3a`);\n    const dailyForcast = await fetch(`${apikey}=hourly,daily&appid=3c072250b7b95a5b2c1f101aabc82b3a`);\n    const data = await response.json();\n    const dailyData = await dailyForcast.json();\n    setWeeklyWeather(data.daily);\n    console.log(\"current====\", data);\n    setXais(data.hourly);\n    setYaxis(data.hourly);\n    console.log(\"hourly dataaa\", data.hourly); // setchartDescription(data.hourly);\n    // setNewChartDes(chartDescriptionData);\n    // console.log(\"current tem\", dailyData.current);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    fetchWeatherData(search);\n    fetchData();\n    setSearch(prev => prev);\n  };\n\n  useEffect(() => {\n    ref.current = setSearch;\n  }, []);\n  const newXAxisData = xAxis && xAxis.map(res => {\n    const day = moment.unix(res.dt).utc();\n    return moment(day).format(\"h:mm a\");\n  });\n  const newYAxisData = yAxis && yAxis.map(res => {\n    return res.temp;\n  }); // const chartDescriptionData =\n  //   chartDescription &&\n  //   chartDescription.map((res) => {\n  //     return res.weather;\n  //   });\n  // const newChartDescriptionData =\n  //   newChartDes &&\n  //   newChartDes.map((res) => {\n  //     return res.description;\n  //   });\n  // console.log(\"chart description data\", newChartDescriptionData);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__header\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"search__filter\",\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input__group\",\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            className: \"search__filed\",\n            type: \"search\",\n            value: search,\n            onChange: e => setSearch(e.target.value),\n            placeholder: \"Search City\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            className: \"search__btn\",\n            label: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main__container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid__container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current__container\",\n          children: /*#__PURE__*/_jsxDEV(CurrentData, {\n            display: data.display,\n            data: data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"map__section\",\n          children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n            isMarkerShown: true,\n            data: data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inner__container\",\n      children: [/*#__PURE__*/_jsxDEV(Chart, {\n        newXAxisData: newXAxisData,\n        newYAxisData: newYAxisData,\n        dataa: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WeeklyData, {\n        weeklyWeather: weeklyWeather,\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"accordion__section\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: `accordion ${setActive}`,\n        onClick: toggleAccordion,\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"accordion__title\",\n          children: props.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Chavron, {\n          className: `${setRotate}`,\n          width: 10,\n          fill: \"#777\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: content,\n        style: {\n          maxHeight: `${setHeight}`\n        },\n        className: \"accordion__content\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"accordion__text\",\n          children: props.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CurrentWeather, \"0Rw8Xd+3IHIhTyKdyLecYgkT4dc=\");\n\n_c = CurrentWeather;\nexport default CurrentWeather;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentWeather\");","map":{"version":3,"sources":["/home/deq/Desktop/my_work/React-training-raksha/src/component/CurrentWeather.js"],"names":["React","useState","useEffect","useRef","Input","Button","axios","WeeklyData","CurrentData","Chart","moment","GoogleMap","Accordion","CurrentWeather","search","setSearch","weeklyWeather","setWeeklyWeather","ref","xAxis","setXais","yAxis","setYaxis","setActive","setActiveState","setHeight","setHeightState","setRotate","setRotateState","data","setData","temp","minTemperature","maxTemperature","humidity","description","icon","display","pressure","feelsLike","visibility","wind","name","geolocation","setGeolocation","lat","log","content","toggleAccordion","current","scrollHeight","console","navigator","getCurrentPosition","position","coords","latitude","longitude","watchPosition","fetchData","fetchWeatherData","response","method","url","main","weather","feels_like","speed","error","message","apikey","fetch","dailyForcast","json","dailyData","daily","hourly","handleSubmit","e","preventDefault","prev","newXAxisData","map","res","day","unix","dt","utc","format","newYAxisData","target","value","props","title","maxHeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./WeatherApp.css\";\nimport { Input } from \"./Input\";\nimport { Button } from \"./Button\";\nimport axios from \"axios\";\nimport WeeklyData from \"./shared/WeeklyData\";\nimport CurrentData from \"./shared/CurrentData\";\nimport Chart from \"./shared/Chart\";\nimport moment from \"moment\";\nimport GoogleMap from \"./shared/GoogleMap\";\nimport Accordion from \"./shared/Accordion\";\n\nfunction CurrentWeather() {\n  const [search, setSearch] = useState(\"\");\n  const [weeklyWeather, setWeeklyWeather] = useState([]);\n  const ref = useRef();\n  const [xAxis, setXais] = useState([]);\n  const [yAxis, setYaxis] = useState([]);\n  // const [chartDescription, setchartDescription] = useState([]);\n  // const [newChartDes, setNewChartDes] = useState([]);\n\n  // Accordion\n  const [setActive, setActiveState] = useState(\"\");\n  const [setHeight, setHeightState] = useState(\"0px\");\n  const [setRotate, setRotateState] = useState(\"accordion__icon\");\n\n  const [data, setData] = useState({\n    temp: 0,\n    minTemperature: [],\n    maxTemperature: [],\n    humidity: \"\",\n    description: \"\",\n    icon: \"\",\n    display: false,\n    pressure: \"\",\n    feelsLike: 0,\n    visibility: \"\",\n    wind: 0,\n    name: \"\",\n  });\n\n  const [geolocation, setGeolocation] = useState({\n    lat: \"\",\n    log: \"\",\n  });\n\n  const content = useRef(null);\n\n  const toggleAccordion = () => {\n    setActiveState(setActive === \"\" ? \"active\" : \"\");\n    setHeightState(\n      setActive === \"active\" ? \"0px\" : `${content.current.scrollHeight}px`\n    );\n    setRotateState(\n      setActive === \"active\" ? \"accordion__icon\" : \"accordion__icon rotate\"\n    );\n    console.log(content.current.scrollHeight);\n  };\n\n  useEffect(() => {\n    if (search === \"\") {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setGeolocation({\n          ...geolocation,\n          lat: position.coords.latitude,\n          log: position.coords.longitude,\n        });\n      });\n    }\n    if (navigator.geolocation) {\n      navigator.geolocation.watchPosition(function (position) {\n        setGeolocation({\n          ...geolocation,\n          lat: position.coords.latitude,\n          log: position.coords.longitude,\n        });\n      });\n    }\n  }, [geolocation.lat, geolocation.log]);\n\n  useEffect(() => {\n    if (geolocation.lat && geolocation.log) {\n      fetchData();\n    }\n  }, [geolocation.lat, geolocation.log]);\n\n  const fetchWeatherData = async (search) => {\n    try {\n      const response = await axios({\n        method: \"GET\",\n        url: `http://api.openweathermap.org/data/2.5/weather?q=${search}&appid=35bd10c223b33cc321caa26ce46f7f0b`,\n      });\n      setData({\n        temp: response.data.main.temp - 273.15,\n        humidity: response.data.main.humidity,\n        description: response.data.weather[0].description,\n        icon: response.data.weather[0].icon,\n        display: true,\n        pressure: response.data.main.pressure,\n        feelsLike: response.data.main.feels_like - 273.15,\n        visibility: response.data.visibility,\n        wind: response.data.wind.speed,\n        name: response.data.name,\n      });\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n  const fetchData = async (search) => {\n    const apikey = `https://api.openweathermap.org/data/2.5/onecall?lat=${geolocation.lat}&lon=${geolocation.log}&units=metric&exclude`;\n    const response = await fetch(\n      `${apikey}=current&appid=3c072250b7b95a5b2c1f101aabc82b3a`\n    );\n    const dailyForcast = await fetch(\n      `${apikey}=hourly,daily&appid=3c072250b7b95a5b2c1f101aabc82b3a`\n    );\n    const data = await response.json();\n    const dailyData = await dailyForcast.json();\n    setWeeklyWeather(data.daily);\n    console.log(\"current====\", data);\n    setXais(data.hourly);\n    setYaxis(data.hourly);\n    console.log(\"hourly dataaa\", data.hourly);\n    // setchartDescription(data.hourly);\n    // setNewChartDes(chartDescriptionData);\n\n    // console.log(\"current tem\", dailyData.current);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    fetchWeatherData(search);\n    fetchData();\n    setSearch((prev) => prev);\n  };\n\n  useEffect(() => {\n    ref.current = setSearch;\n  }, []);\n\n  const newXAxisData =\n    xAxis &&\n    xAxis.map((res) => {\n      const day = moment.unix(res.dt).utc();\n      return moment(day).format(\"h:mm a\");\n    });\n  const newYAxisData =\n    yAxis &&\n    yAxis.map((res) => {\n      return res.temp;\n    });\n  // const chartDescriptionData =\n  //   chartDescription &&\n  //   chartDescription.map((res) => {\n  //     return res.weather;\n  //   });\n\n  // const newChartDescriptionData =\n  //   newChartDes &&\n  //   newChartDes.map((res) => {\n  //     return res.description;\n  //   });\n  // console.log(\"chart description data\", newChartDescriptionData);\n  return (\n    <div>\n      <div className=\"app__header\">\n        <form className=\"search__filter\" onSubmit={handleSubmit}>\n          <div className=\"input__group\">\n            <Input\n              className=\"search__filed\"\n              type=\"search\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              placeholder=\"Search City\"\n            ></Input>\n            <Button type=\"submit\" className=\"search__btn\" label={\"Search\"} />\n          </div>\n        </form>\n      </div>\n      <div className=\"main__container\">\n        <div className=\"grid__container\">\n          <div className=\"current__container\">\n            <CurrentData display={data.display} data={data} />\n          </div>\n          <div className=\"map__section\">\n            <GoogleMap isMarkerShown data={data} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"inner__container\">\n        <Chart\n          newXAxisData={newXAxisData}\n          newYAxisData={newYAxisData}\n          dataa={data}\n        />\n        <WeeklyData weeklyWeather={weeklyWeather} data={data} />\n      </div>\n      <div className=\"accordion__section\">\n        <button\n          type=\"button\"\n          className={`accordion ${setActive}`}\n          onClick={toggleAccordion}\n        >\n          <h4 className=\"accordion__title\">{props.title}</h4>\n          <Chavron className={`${setRotate}`} width={10} fill={\"#777\"} />\n        </button>\n        <div\n          ref={content}\n          style={{ maxHeight: `${setHeight}` }}\n          className=\"accordion__content\"\n        >\n          <div className=\"accordion__text\">{props.content}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CurrentWeather;\n"]},"metadata":{},"sourceType":"module"}