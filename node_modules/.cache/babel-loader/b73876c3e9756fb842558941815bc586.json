{"ast":null,"code":"var _jsxFileName = \"/home/deq/Desktop/my_work/React-training-raksha/src/component/CurrentWeather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./WeatherApp.css\";\nimport { Input } from \"./Input\";\nimport { Button } from \"./Button\";\nimport axios from \"axios\";\nimport WeeklyData from \"./shared/WeeklyData\";\nimport CurrentData from \"./shared/CurrentData\";\nimport Chart from \"./shared/Chart\";\nimport moment from \"moment\";\nimport GoogleMap from \"./shared/GoogleMap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CurrentWeather(props) {\n  _s();\n\n  const [search, setSearch] = useState(\"\");\n  const [weeklyWeather, setWeeklyWeather] = useState([]);\n  const ref = useRef();\n  const [xAxis, setXais] = useState([]);\n  const [yAxis, setYaxis] = useState([]);\n  const [aLet, setALet] = useState(0);\n  const [aLon, setALon] = useState(0);\n  const [data, setData] = useState({\n    temp: 0,\n    minTemperature: [],\n    maxTemperature: [],\n    humidity: \"\",\n    description: \"\",\n    icon: \"\",\n    display: false,\n    pressure: \"\",\n    feelsLike: 0,\n    visibility: \"\",\n    wind: 0,\n    name: \"\"\n  });\n  const [geolocation, setGeolocation] = useState({\n    lat: \"\",\n    log: \"\"\n  });\n  useEffect(() => {\n    if (search === \"\") {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setGeolocation({ ...geolocation,\n          lat: position.coords.latitude,\n          log: position.coords.longitude\n        });\n      });\n    }\n\n    if (navigator.geolocation) {\n      navigator.geolocation.watchPosition(function (position) {\n        setGeolocation({ ...geolocation,\n          lat: position.coords.latitude,\n          log: position.coords.longitude\n        });\n      });\n    }\n  }, [geolocation.lat, geolocation.log]);\n  useEffect(() => {\n    if (geolocation.lat && geolocation.log) {\n      fetchData();\n    }\n  }, [geolocation.lat, geolocation.log]);\n\n  const fetchWeatherData = async search => {\n    try {\n      const response = await axios({\n        method: \"GET\",\n        url: `http://api.openweathermap.org/data/2.5/weather?q=${search}&appid=35bd10c223b33cc321caa26ce46f7f0b`\n      });\n      console.log(\"response\", response.data);\n      setData({\n        temp: response.data.main.temp - 273.15,\n        humidity: response.data.main.humidity,\n        description: response.data.weather[0].description,\n        icon: response.data.weather[0].icon,\n        display: true,\n        pressure: response.data.main.pressure,\n        feelsLike: response.data.main.feels_like - 273.15,\n        visibility: response.data.visibility,\n        wind: response.data.wind.speed,\n        name: response.data.name\n      });\n      setALet(response.data.coord.lat);\n      setALon(response.data.coord.lon);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const fetchData = async search => {\n    const apikey = `https://api.openweathermap.org/data/2.5/onecall?lat=${geolocation.lat}&lon=${geolocation.log}&units=metric&exclude`;\n    const response = await fetch(`${apikey}=current&appid=3c072250b7b95a5b2c1f101aabc82b3a`);\n    const dailyForcast = await fetch(`${apikey}=hourly,daily&appid=3c072250b7b95a5b2c1f101aabc82b3a`);\n    const data = await response.json();\n    const dailyData = await dailyForcast.json();\n    setWeeklyWeather(data.daily);\n    setXais(data.hourly);\n    setYaxis(data.hourly);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    fetchWeatherData(search);\n    fetchData();\n    setSearch(prev => prev);\n  };\n\n  useEffect(() => {\n    ref.current = setSearch;\n  }, []);\n  const newXAxisData = xAxis && xAxis.map(res => {\n    const day = moment.unix(res.dt).utc();\n    return moment(day).format(\"h:mm a\");\n  });\n  const newYAxisData = yAxis && yAxis.map(res => {\n    return res.temp;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__header\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"search__filter\",\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input__group\",\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            className: \"search__filed\",\n            type: \"search\",\n            value: search,\n            onChange: e => setSearch(e.target.value),\n            placeholder: \"Search City\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            className: \"search__btn\",\n            label: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CurrentWeather, \"7NxwQlABpuvfDcC4A7Jkl2IILyI=\");\n\n_c = CurrentWeather;\nexport default CurrentWeather;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentWeather\");","map":{"version":3,"sources":["/home/deq/Desktop/my_work/React-training-raksha/src/component/CurrentWeather.js"],"names":["React","useState","useEffect","useRef","Input","Button","axios","WeeklyData","CurrentData","Chart","moment","GoogleMap","CurrentWeather","props","search","setSearch","weeklyWeather","setWeeklyWeather","ref","xAxis","setXais","yAxis","setYaxis","aLet","setALet","aLon","setALon","data","setData","temp","minTemperature","maxTemperature","humidity","description","icon","display","pressure","feelsLike","visibility","wind","name","geolocation","setGeolocation","lat","log","navigator","getCurrentPosition","position","coords","latitude","longitude","watchPosition","fetchData","fetchWeatherData","response","method","url","console","main","weather","feels_like","speed","coord","lon","error","message","apikey","fetch","dailyForcast","json","dailyData","daily","hourly","handleSubmit","e","preventDefault","prev","current","newXAxisData","map","res","day","unix","dt","utc","format","newYAxisData","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./WeatherApp.css\";\nimport { Input } from \"./Input\";\nimport { Button } from \"./Button\";\nimport axios from \"axios\";\nimport WeeklyData from \"./shared/WeeklyData\";\nimport CurrentData from \"./shared/CurrentData\";\nimport Chart from \"./shared/Chart\";\nimport moment from \"moment\";\nimport GoogleMap from \"./shared/GoogleMap\";\n\nfunction CurrentWeather(props) {\n  const [search, setSearch] = useState(\"\");\n  const [weeklyWeather, setWeeklyWeather] = useState([]);\n  const ref = useRef();\n  const [xAxis, setXais] = useState([]);\n  const [yAxis, setYaxis] = useState([]);\n  const [aLet, setALet] = useState(0);\n  const [aLon, setALon] = useState(0);\n\n  const [data, setData] = useState({\n    temp: 0,\n    minTemperature: [],\n    maxTemperature: [],\n    humidity: \"\",\n    description: \"\",\n    icon: \"\",\n    display: false,\n    pressure: \"\",\n    feelsLike: 0,\n    visibility: \"\",\n    wind: 0,\n    name: \"\",\n  });\n\n  const [geolocation, setGeolocation] = useState({\n    lat: \"\",\n    log: \"\",\n  });\n\n  useEffect(() => {\n    if (search === \"\") {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setGeolocation({\n          ...geolocation,\n          lat: position.coords.latitude,\n          log: position.coords.longitude,\n        });\n      });\n    }\n    if (navigator.geolocation) {\n      navigator.geolocation.watchPosition(function (position) {\n        setGeolocation({\n          ...geolocation,\n          lat: position.coords.latitude,\n          log: position.coords.longitude,\n        });\n      });\n    }\n  }, [geolocation.lat, geolocation.log]);\n\n  useEffect(() => {\n    if (geolocation.lat && geolocation.log) {\n      fetchData();\n    }\n  }, [geolocation.lat, geolocation.log]);\n\n  const fetchWeatherData = async (search) => {\n    try {\n      const response = await axios({\n        method: \"GET\",\n        url: `http://api.openweathermap.org/data/2.5/weather?q=${search}&appid=35bd10c223b33cc321caa26ce46f7f0b`,\n      });\n      console.log(\"response\", response.data);\n      setData({\n        temp: response.data.main.temp - 273.15,\n        humidity: response.data.main.humidity,\n        description: response.data.weather[0].description,\n        icon: response.data.weather[0].icon,\n        display: true,\n        pressure: response.data.main.pressure,\n        feelsLike: response.data.main.feels_like - 273.15,\n        visibility: response.data.visibility,\n        wind: response.data.wind.speed,\n        name: response.data.name,\n      });\n      setALet(response.data.coord.lat);\n      setALon(response.data.coord.lon);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const fetchData = async (search) => {\n    const apikey = `https://api.openweathermap.org/data/2.5/onecall?lat=${geolocation.lat}&lon=${geolocation.log}&units=metric&exclude`;\n    const response = await fetch(\n      `${apikey}=current&appid=3c072250b7b95a5b2c1f101aabc82b3a`\n    );\n    const dailyForcast = await fetch(\n      `${apikey}=hourly,daily&appid=3c072250b7b95a5b2c1f101aabc82b3a`\n    );\n    const data = await response.json();\n    const dailyData = await dailyForcast.json();\n    setWeeklyWeather(data.daily);\n    setXais(data.hourly);\n    setYaxis(data.hourly);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    fetchWeatherData(search);\n    fetchData();\n    setSearch((prev) => prev);\n  };\n\n  useEffect(() => {\n    ref.current = setSearch;\n  }, []);\n\n  const newXAxisData =\n    xAxis &&\n    xAxis.map((res) => {\n      const day = moment.unix(res.dt).utc();\n      return moment(day).format(\"h:mm a\");\n    });\n  const newYAxisData =\n    yAxis &&\n    yAxis.map((res) => {\n      return res.temp;\n    });\n  return (\n    <div>\n      <div className=\"app__header\">\n        <form className=\"search__filter\" onSubmit={handleSubmit}>\n          <div className=\"input__group\">\n            <Input\n              className=\"search__filed\"\n              type=\"search\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              placeholder=\"Search City\"\n            ></Input>\n            <Button type=\"submit\" className=\"search__btn\" label={\"Search\"} />\n          </div>\n        </form>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default CurrentWeather;\n"]},"metadata":{},"sourceType":"module"}